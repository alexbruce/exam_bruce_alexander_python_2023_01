DEFINE CLASS User:
    DEFINE FUNCTION initialise(self, AccountOwnerID,firstname,surname,mobile):
        SET self.AccountOwnerID TO AccountOwnerID
        SET self.firstname TO firstname
        SET self.surname TO surname
        SET self.mobile TO mobile

DEFINE CLASS SavingAccount:
    DEFINE FUNCTION initialise(self, AccountOwnerID,AccountNumber,AccountType,OpeningBalance,accountDBIndex):
        SET self.AccountOwnerID TO AccountOwnerID
        SET self.AccountNumber TO AccountNumber
        SET self.AccountType TO AccountType
        SET self.OpeningBalance TO OpeningBalance
        SET self.accountDBIndex TO accountDBIndex

DEFINE CLASS ChequeAccount:
    DEFINE FUNCTION initialise(self, AccountOwnerID,AccountNumber,AccountType,OpeningBalance,accountDBIndex):
        SET self.AccountOwnerID TO AccountOwnerID
        SET self.AccountNumber TO AccountNumber
        SET self.AccountType TO AccountType
        SET self.OpeningBalance TO OpeningBalance
        SET self.accountDBIndex TO accountDBIndex

DEFINE CLASS ATM:
    DEFINE FUNCTION initialise(self, users=None, accounts=None, currentUser=None, currentAccount=None, error=False, exitProgram=False):
        SET self.users TO users
        SET self.accounts TO accounts
        SET self.currentUser TO currentUser
        SET self.currentAccount TO currentAccount
        SET self.error TO error
        SET self.exitProgram TO exitProgram

    DEFINE FUNCTION beginTransaction():
        SET self.currentUser TO None
        SET self.currentAccount TO None
        SET self.error TO False

    DEFINE FUNCTION login(userID):
        IF (userID IS NOT A NUMBER):
            handle error
        ELSE:
            FOR user IN self.users:
                IF user.AccountOwnerID EQUALS userID:
                    WRITE "Welcome, {firstname} {surname}.
                    		Please select an option:
                    			1 FOR Deposit
                    			2 FOR Withdraw
                    			3 FOR Balance
                    			q to Quit"
                    SET self.currentUser TO user
                    leave for loop
            ELSE:
                handle error

    DEFINE FUNCTION selectTransaction(transactionOption):
        IF transactionOption EQUALS "q":
	    self.quitSequence()
	ELSEIF transactionOption NOT IN ['1', '2', '3']:
	    handle error
	ELSE:
	    WRITE "Which account would you like to access."
	    SET transactionOption TO transactionOption
	    SET index TO 0
	    SET optionList TO empty list
	    SET listedAccounts TO empty list
	    FOR account IN self.accounts:
		IF account.AccountOwnerID EQUALS self.currentUser.AccountOwnerID:
                    index += 1
                    WRITE "{index} FOR {account number} ({account type})"
                    optionList.append(index)
                    listedAccounts.append(account)
            ELSE:
                SET accountOption TO INPUT()
                IF (accountOption IS NOT A NUMBER):
                    handle error
                ELSEIF int(accountOption) NOT IN optionList:
                    handle error
                ELSE:
                    SET self.currentAccount TO listedAccounts[int(accountOption) - 1]
                    self.handleTransaction(transactionOption)

    DEFINE FUNCTION handleTransaction(transactionOption):
        IF transactionOption EQUALS 1:
            self.handleDeposit()
        ELSEIF transactionOption EQUALS 2:
            self.handleWithdrawal()
        ELSEIF transactionOption EQUALS 3:
            self.displayBalance()

    DEFINE FUNCTION handleDeposit():
        WRITE "Please enter the amount to be deposited."
        SET depositAmount TO INPUT()
        IF (depositAmount IS NOT A NUMBER):
            handle error
        ELSE:
            self.updateBalance(int(depositAmount))

    DEFINE FUNCTION handleWithdrawal():
        WRITE "Please enter the amount to be withdrawn. (Balance ${balance})".format(self.currentAccount.OpeningBalance)
        SET withdrawAmount TO INPUT()
        IF NOT withdrawAmount.isdigit() or int(withdrawAmount) > self.currentAccount.OpeningBalance or int(withdrawAmount) <= 0:
            handle error
        ELSE:
            self.updateBalance(-int(withdrawAmount))

    DEFINE FUNCTION displayBalance():
        WRITE "Account Summary:
        	Account: {account number} ({account type})
        	Balance: {balance}\n"

    DEFINE FUNCTION updateBalance(amount):
        SET self.currentAccount.OpeningBalance TO round(self.currentAccount.OpeningBalance + amount,2)
        SET self.accounts[self.currentAccount.accountDBIndex].OpeningBalance TO self.currentAccount.OpeningBalance
        self.displayBalance()

    DEFINE FUNCTION handleError(message):
        SET self.error TO True
        SET self.currentUser TO None
        SET self.currentAccount TO None
        WRITE "Wrong Input
        	{message}"

    DEFINE FUNCTION quitSequence():
        SET accountsDataToExport TO empty array with length(self.accounts) rows and 4 columns
        SET accountsDataToExport[0] TO ["AccountOwnerID", "AccountNumber", "AccountType", 'OpeningBalance']

        FOR row IN range(0, len(self.accounts)):
            SET accountsDataToExport[row+1][0] TO self.accounts[row].AccountOwnerID
            SET accountsDataToExport[row+1][1] TO self.accounts[row].AccountNumber
            SET accountsDataToExport[row+1][2] TO self.accounts[row].AccountType
            SET accountsDataToExport[row+1][3] TO self.accounts[row].OpeningBalance

        SAVE 'OpeningAccountsData.txt' FROM accountsDataToExport, seperated by "|||"
        WRITE all accounts
        SET self.exitProgram TO True

    DEFINE FUNCTION importData():
        SET importedAccountData TO READ "OpeningAccountsData.txt", seperated by "|||"
        SET importedUserData TO READ "UserInfo.txt" seperated by ","
        SET accountsList TO empty list
        SET usersList TO empty list
        FOR index IN range(0,len(importedAccountData)):
            IF importedAccountData[index][2] EQUALS "Saving":
                SET savingsAccount TO SavingAccount(importedAccountData[index][0], importedAccountData[index][1], importedAccountData[index][2], float(importedAccountData[index][3]), int(index))
                accountsList.append(savingsAccount)
            ELSE:
                SET chequeAccount TO ChequeAccount(importedAccountData[index][0], importedAccountData[index][1], importedAccountData[index][2], float(importedAccountData[index][3]), int(index))
                accountsList.append(chequeAccount)
        FOR index IN range(0,len(importedUserData)):
            SET user TO User(importedUserData[index][3], importedUserData[index][0], importedUserData[index][1], importedUserData[index][2])
            usersList.append(user)
        SET self.accounts TO accountsList
        SET self.users TO usersList

    DEFINE FUNCTION startAtm():
        WHILE True:
            self.beginTransaction()
            SET userID TO INPUT()
            self.login(userID)
            IF self.error EQUALS True:
                restart while loop
            SET transactionOption TO INPUT()
            SET listedAccounts TO self.selectTransaction(transactionOption)
            IF self.exitProgram:
                exit while loop

IF (EXECUTED IN TOP LEVEL CODE):
    SET atm TO ATM()
    atm.importData()
    atm.startAtm()
